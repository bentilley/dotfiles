#!/usr/bin/env bash

set -o errexit
# set -o nounset
set -o pipefail
if [[ "${TRACE-0}" == "1" ]]; then
  set -o xtrace
fi

if [[ "${1-}" =~ ^-*h(elp)?$ ]]; then
  echo 'Usage: git_branch_origin_master BRANCH_NAME

Create a new branch with the same name as the current branch, but with origin/master as the base.

'
  exit
fi

main() {
  if [ -z "$1" ]; then
    echo "BRANCH_NAME is required"
    exit 1
  fi

  local branch_name="$1"
  local main_branch
  main_branch="$(git_main_branch)"

  local remotes=()
  mapfile -t remotes < <(git remote -v | awk '{print $1}' | sort | uniq)
  if [ "${#remotes[@]}" -ne 1 ]; then
    echo "Expected exactly one remote, but found ${#remotes[@]} remotes: ${remotes[*]}"
    echo "Time to update $0"
    exit 1
  fi

  local remote="${remotes[0]}"

  git fetch "$remote" "$main_branch"

  git switch --no-track --create "$branch_name" "${remote}/${main_branch}"

}

git_main_branch() {
  command git rev-parse --git-dir &>/dev/null || return
  local ref
  for ref in refs/{heads,remotes/{origin,upstream}}/{main,trunk,mainline,default}; do
    if command git show-ref -q --verify "$ref"; then
      echo "${ref:t}"
      return
    fi
  done
  echo master
}

main "$@"
