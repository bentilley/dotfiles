# javascript file snippets

# these functions are imported from the /pythonx dir in /.vim
global !p
from snippets.javascript import generate_constructor
endglobal

# UTILS

snippet td "TODO label" b
// TODO(`git branch --show-current | sed -e 's/^\([0-9]\+\)-.*$/\1/g'`) $0
endsnippet

snippet lg "Console logging" i
console.log($1)
endsnippet

snippet vlg "Console logging a variable" b
console.log("$1: ", $1);
endsnippet

snippet olg "Console logging many variables" b
console.log({$1});
endsnippet

snippet elg "Console error" b
console.error($0);
endsnippet

snippet pl "Log response and error of promise" w
then(res => console.log, err => console.error);
endsnippet

snippet db "Debugger" b
debugger;
endsnippet

snippet ds "doc string" b
/** ${1:Brief description}
 *
 * ${2:One line description...}
 *
 * @${3:param}$0
 * @${4:returns}
 */
endsnippet

# import / export

snippet i "Bare import statement" b
import "${1:package}";
endsnippet

snippet imp "Import statement" b
import $1 from '$2';
endsnippet

snippet exp "export" b
export ${1:default }$0
endsnippet

# LANGUAGE

snippet if "if statement" b
if (${1:condition}) {
  $0
}
endsnippet

snippet ife "if else statement" b
if (${1:condition}) {
  $2
} else {
  $0
}
endsnippet

snippet ifs "short if statement" b
if (${1:condition}) ${0:return};
endsnippet

snippet err "new error" i
new Error("${1:something went wrong}")${0:;}
endsnippet

snippet fn "Named function definition" i
function $1($2) {
  $0
}
endsnippet

snippet fm "Class Method Function" b
$1($2) {$0}
endsnippet

snippet get "Class Getter Function" b
get $1() {$0}
endsnippet

snippet fad "Arrow function definition" w
const ${1:funcName} = ($2) => {$0};
endsnippet

snippet fa "Arrow function" i
($1) => ${2:{$0}}
endsnippet

snippet ef "Exported function definition" b
export function $1($2) {
$0
}
endsnippet

snippet iife "Immediately Invoked function expression" b
(function(){
  $0
})();
endsnippet

snippet for "For loop" b
for (${1:initialise}; ${2:condition}; ${3:increment}) {
  ${0:statement}
}
endsnippet

snippet "fori(.+)" "index for loop" br
for (let `!p snip.rv = match[1]` = ${2:0}; `!p snip.rv = match[1]` < ${3:limit}; ${4:`!p snip.rv = match[1]`++}) {
  ${0:statement}
}
endsnippet

snippet cls "ES6 class definition with constructor" b
class $1`!p snip.rv = " extends " if t[2] else ""`$2 {
  constructor($3) {
    `!p snip.rv = generate_constructor(t[2], t[3])`
  }
  $0
}
endsnippet

snippet swt "Switch statement" b
switch ($1) {
  case $2:
    break;
  default:
  $0
}
endsnippet

snippet tc "try / catch block" b
try {
  $1
} catch (${2:error}) {
  ${0:console.error(error);}
}
endsnippet

snippet cs "Case statement (in switch)" b
case $1:
  $0
  break;
endsnippet

snippet npr "New promise" w
new Promise((resolve, reject) => {$0});
endsnippet

snippet thn ".then a promise" i
then(res => {$1}, err => {${2:console.error(err);}})$0
endsnippet

# TESTING

snippet des "jest describe block" b
describe("$1", () => {$2});
endsnippet

snippet it "jest it block" b
it("$1", () => {$2});
endsnippet

snippet be "jest before each" b
beforeEach(() => {
  $0
});
endsnippet

snippet ba "jest before all" b
beforeAll(() => {
  $0
});
endsnippet

snippet ae "jest after each" b
afterEach(() => {
  $0
});
endsnippet

snippet aa "jest after all" b
afterAll(() => {
  $0
});
endsnippet

snippet fnj "jest mock function" i
jest.fn($1)$0
endsnippet

snippet ex "jest expect" b
expect($1)${2:.toBe($0)};
endsnippet

snippet exe "jest expect to equal" b
expect(${1:value})${2:.toEqual($0)};
endsnippet

snippet exc "jest expect to have been called" b
expect(${1:value})${2:.toHaveBeenCalled($0)};
endsnippet
