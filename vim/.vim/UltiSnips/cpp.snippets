# C++ file snippets

# these functions are imported from the /pythonx dir in /.vim
# global !p
# from snippets.cpp import generate_constructor
# endglobal

# tools

snippet p "printf" i
printf("$1\n", $0);
endsnippet

snippet ps "printf no args" i
printf("$1\n");$0
endsnippet

snippet mc "multiline comment" b
/*
 * $0
 */
endsnippet

# basic language

snippet if "if block" b
if (${1:condition}) {
  ${0:statement}
}
endsnippet

snippet ife "if/else block" b
if (${1:condition}) {
  ${2:statement}
} else {
  ${0:statement}
}
endsnippet

snippet ifc "if/else chaining block" b
if (${1:condition}) {
  ${2:statement}
} else
  ${0:statement}
endsnippet

snippet for "for loop" b
for ($1; $2; $3) {
  $0
}
endsnippet

snippet "fori(.+)" "index for loop" br
for (${1:int} `!p snip.rv = match[1]`{${2:0}}; `!p snip.rv = match[1]` < ${3:limit}; ${4:++`!p snip.rv = match[1]` }) {
  ${0:statement}
}
endsnippet

snippet fore "for each loop" b
for (${1:auto ${2:element}} : ${3:array}) {
  ${0:statement}
}
endsnippet

snippet fn "function definition" b
${1:void} ${2:identifier}(${3:args})${4: {$5}}
endsnippet

snippet fmd "class method definition" i
${1:Class}::${2:method}(${3:args}) {$0}
endsnippet

snippet fl "lambda function" i
[${1:capture}](${2:parameters}) ${3:-> ${4:void} }{$0}
endsnippet

snippet fncd "constructor and destructor definition" b
${1:Class}::$1() {$0}
$1::~$1() {}
endsnippet

snippet swt "switch statement" b
switch (${1:expression}) {
case ${2:label}:
  ${3:statement}
  break;$4
default:
  ${0:statement}
  break;
}
endsnippet

snippet cs "case statement (inside switch)" b
case ${1:label}:
  ${2:statement}
  break;$0
endsnippet

snippet whl "while loop" b
while (${1:condition}) {
  ${0:statement}
}
endsnippet

snippet dow "do while statement" b
do {
  ${1:statement}
} while (${0:condition});
endsnippet

# preprocessor

snippet i "#include file statement" b
#include "${1:file}"$0
endsnippet

snippet "ii(.+)" "include <something>" br
#include <`!p snip.rv = match[1]`>
endsnippet

# user-defined data types

snippet en "enum definition" b
enum ${1:Name} ${2:: ${3:std::uint_least8_t} }{
  ${4:${1/.*/\U$0\E/}_${0:FIRST}},
};
endsnippet

snippet ec "enum class definition" b
enum class ${1:Name} ${2:: ${3:std::uint_least8_t} }{
  ${0:First},
};
endsnippet

snippet st "struct definition" b
struct ${1:Name} {
  $0
};
endsnippet

snippet cls "class definition" b
class ${1:Name} ${2:: ${3:public ${4:PubSub}}${5:, private ${6:PrivSub}}}{
public:
  $1();
  ~$1();
  $0
private:
};
endsnippet

snippet ns "namespace" b
namespace ${1:Name} {
${0:statment}
}
endsnippet

snippet uns "using namespace" b
using namespace ${1:Name};$0
endsnippet

# bigger things

snippet main "main function definition" b
int main(int argc, char *argv[]) {

  $0

  return 0;
}
endsnippet
