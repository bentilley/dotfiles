" == VIMRC ==
" Author: Ben Tilley

if !has('nvim')
  set viminfo='100,<50,s10,h,n~/.config/vim/viminfo
endif

source ~/.dotfiles/vim/learning.vim

" Plugins {{{

" auto download and install vim-plug if doesn't exist
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

  " CORE
  Plug 'w0rp/ale'
  Plug 'SirVer/ultisnips'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  " Plug 'lotabout/skim', { 'do': './install' }
  Plug 'mattn/emmet-vim'
  Plug 'mileszs/ack.vim'                  " greping in vim
  Plug 'aperezdc/vim-template'
  Plug 'junegunn/limelight.vim'           " hyper focused text highlighting
  Plug 'majutsushi/tagbar'                " show tag window
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-projectionist'
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-abolish'
  Plug 'qxxxb/vim-searchhi'
  Plug 'jeetsukumaran/vim-indentwise'

  if has('nvim')
    Plug 'glacambre/firenvim', { 'do': { _ -> firenvim#install(0) } }
  endif

  " SYNTAX
  Plug 'pangloss/vim-javascript'          " javascript
  Plug 'mxw/vim-jsx'                      " jsx
  Plug 'posva/vim-vue'                    " vue
  Plug 'bfrg/vim-cpp-modern'              " cpp
  Plug 'Quramy/vim-js-pretty-template'    " template string
  Plug 'aklt/plantuml-syntax'             " plantuml
  Plug 'cespare/vim-toml'                 " toml
  Plug 'ekalinin/Dockerfile.vim'          " docker
  Plug 'chr4/nginx.vim'                   " nginx
  Plug 'lark-parser/vim-lark-syntax'      " lark
  Plug 'lifepillar/pgsql.vim'             " postgresql

  " LANGUAGE SPECIFIC
  Plug 'weirongxu/plantuml-previewer.vim' " plantuml previewer in browser
  Plug 'tyru/open-browser.vim'            " open URI in browser
  Plug 'tmux-plugins/vim-tmux'            " nice extras for tmux.conf

  " MISC
  Plug 'vimwiki/vimwiki'

call plug#end()

" }}}

" Loading and Configuring Settings {{{

" automatically source vimrc after session load
augroup sessions
  autocmd!
  autocmd SessionLoadPost * :source $MYVIMRC
augroup END

" using marker folding for .vimrc
augroup filetype_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
augroup END

" handly quick file and directory edit mappings
nnoremap <silent> <Leader>ev :vs $MYVIMRC<CR>
nnoremap <silent> <Leader>sv :source $MYVIMRC<CR>
nnoremap <silent> <Leader>sf :source %<CR>
nnoremap <silent> <Leader>vc :vs ~/.dotfiles/vim/.vim/colors/squeedom.vim<CR>
nnoremap <silent> <Leader>vd :vs ~/.dotfiles/vim/.vim<CR>
nnoremap <silent> <Leader>t :!tmux source ~/.tmux.conf<CR>

" }}}

" Basic Editor Settings {{{

colorscheme squeedom
set undofile
set undodir^=~/.config/vim/extra/undo//               " set a directory for undo files
let mapleader = "\\"
let maplocalleader = ";"
set clipboard+=unnamed                   " yanking goes straigth clipboard buffer
set noea                                 " stopping windows from automatic resize on close
set softtabstop=2 shiftwidth=2 expandtab " spaces instead of tabs, and set indent width
set shiftround
set backspace=2                          " make backspace work like most other programs
set incsearch                            " highlight first search match while typing
set hlsearch | nohl                      " highlight all search matches when search completed
set number                               " add line numbers
set relativenumber                       " do line numbering relative to current cursor row
set notagrelative                        " tags not followed relative to tag file
set ignorecase                           " search case insensitive - use \C for sensitive
set smartcase                            " search case sensitive if contains capital letters
set listchars=eol:$,space:.,tab:<->,trail:%,precedes:<,extends:>
set sidescroll=5
set timeoutlen=1000 ttimeoutlen=0        " exit visual faster
set path=$PWD/**
set complete-=i                         " removes indluded files from search
set autoindent
set nocursorline
" set omnifunc=syntaxcomplete#Complete
" TODO read status line docs
" TODO autocommands and setlocal to define diff status lines for diff filetype

let g:my_colour_column = 80
augroup MyColorColumn
  autocmd!
  autocmd BufNewFile,BufEnter,WinNew * call squee#SetMyColorColumn()
  autocmd QuitPre * call squee#SetMyColorColumnCleanUp()
augroup END

" }}}

" Status Line {{{

set statusline=>\ %f%{tagbar#currenttag(\"\ >\ \%s\",\"\",\"fs\")}%=[%4l/%4L]
" TODO read status line docs
" TODO autocommands and setlocal to define diff status lines for diff filetype

" }}}

" Normal Mode Helpers {{{

" tab settings - a la unimpaired
nnoremap [w :tabprevious<CR>
nnoremap ]w :tabnext<CR>

" linting helpers
nnoremap <Leader>g gggqG<C-O><C-O>zz

" highlighting
nnoremap <silent> <Leader>a :nohl<CR>

" file name to clipboard
nnoremap <Leader>cf :let @+=expand("%")<CR>
nnoremap <Leader>cd :let @+=expand("%:p")<CR>

" fold commands
nnoremap sfld :set foldmethod=syntax<CR>
nnoremap mfld :set foldmethod=manual<CR>
nnoremap <Space> za

" renaming things
nnoremap <Leader>rn yiw:%s/<C-R>+/
nnoremap <C-p> viwp

nnoremap <Leader>bs yiw:BufSearch <C-R>0<CR>

" generate ctags
nnoremap <Leader>c :terminal ++hidden ctags -R -f ./.git/tags .<CR>

" working with tabs
command! TabF tabnew | FZF

" }}}

" Insert Mode Helpers {{{

" toggle word cases
inoremap <c-u> <esc>viwUea
inoremap <c-y> <esc>viwuea

" movement in insert mode
inoremap <C-h> <C-o>h
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k
inoremap <C-l> <C-o>l
inoremap ;a <Esc>A

" }}}

" Command-line Mode Helpers {{{

cnoremap <C-h> <Left>
cnoremap <C-j> <Down>
cnoremap <C-k> <Up>
cnoremap <C-l> <Right>

" }}}

" Custom Commands {{{

command! VF vsplit | FZF
command! SF split | FZF
command! XA mks! | xa

" }}}

" Abbreviations {{{

iabbrev shrg ¯\_(ツ)_/¯

" }}}

" Spelling {{{

" }}}

" Vimdiff Options {{{

set diffopt+=iwhiteall

" shortcuts for 3-way merge
nnoremap <Leader>1 :diffget LOCAL<CR>
nnoremap <Leader>2 :diffget BASE<CR>
nnoremap <Leader>3 :diffget REMOTE<CR>

" }}}

" Operator Pending Mappings {{{

" next and last brakets
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap an( :<c-u>normal! f(va(<cr>
onoremap il( :<c-u>normal! F)vi(<cr>
onoremap al( :<c-u>normal! F)va(<cr>
onoremap in@ :<c-u>normal! f@viW<cr>
onoremap il@ :<c-u>normal! F@viW<cr>

" }}}

" NETRW Settings {{{

let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_winsize = 50
let g:netrw_altv=1 | let g:netrw_alto=1

" }}}

" COC Settings {{{

set hidden
set cmdheight=2
set updatetime=300
set shortmess+=c
if !has('nvim')
  set signcolumn=number
endif

" Generic
nmap <Localleader>rn <Plug>(coc-rename)
inoremap <silent><expr> <NUL> coc#refresh()

" Navigation
nmap <silent> <Localleader>gd <Plug>(coc-definition)
nmap <silent> <Localleader>gy <Plug>(coc-type-definition)
nmap <silent> <Localleader>gi <Plug>(coc-implementation)
nmap <silent> <Localleader>gr <Plug>(coc-references)

" Actions
nmap <Localleader>gaf <Plug>(coc-codeaction)
nmap <Localleader>gal <Plug>(coc-codeaction-line)
nmap <Localleader>ga <Plug>(coc-codeaction-selected)
vmap <Localleader>ga <Plug>(coc-codeaction-selected)
nmap <Localleader>gac <Plug>(coc-codelens-action)

" Operator Pending
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" nnoremap <silent> [g <Plug>(coc-diagnostic-prev)
" nnoremap <silent> ]g <Plug>(coc-diagnostic-next)

" }}}

" ALE Settings {{{

let g:ale_fix_on_save = 1
let g:ale_javascript_prettier_use_local_config = 1
let g:ale_completion_enabled = 1
nnoremap [j :ALENext<cr>
nnoremap ]j :ALEPrevious<cr>
nnoremap ]J :ALEFirst<cr>
nnoremap ]J :ALELast<cr>

function ToggleALEFixOnSave()
  if !exists("b:ale_fix_on_save")
    let b:ale_fix_on_save = 0
    echom "Fix on save: OFF"
  else
    let b:ale_fix_on_save = !b:ale_fix_on_save
    echom "Fix on save: ".(b:ale_fix_on_save ? "ON" : "OFF")
  endif
endfunction

" think 'formatting off'
nnoremap <silent> <localleader>fo :<C-U>call ToggleALEFixOnSave()<CR>

" }}}

" Ultisnips Settings {{{

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsListSnippets="<c-g>"
"inoremap <localleader>u <C-R>=UltiSnips#ListSnippets()<CR>

augroup AutoSnippets
  autocmd!
  autocmd BufReadPost *.hpp execute("UltiSnipsAddFiletypes cpp")
augroup END

" }}}

" Limelight Settings {{{

let g:limelight_conceal_ctermfg = 240
let g:limelight_default_coefficient = 0.4
let g:limelight_paragraph_span = 0
nnoremap <Leader>i :Limelight!!<CR>
function! SetLimelightSpan(span)
  let g:limelight_paragraph_span = a:span
endfunction
nnoremap dl :<C-U>call SetLimelightSpan(v:count)<CR>jk
xnoremap <Leader>l :Limelight<CR>

" }}}

" Tagbar Settings {{{

let g:tagbar_ctags_bin="/usr/local/bin/ctags"
nnoremap <silent> tt :TagbarToggle<CR>          " as in 'tag! tag!'
nnoremap <silent> tg :TagbarOpenAutoClose<CR>   " as in 'tag go!'
nnoremap <silent> tp :TagbarTogglePause<CR>     " as in 'tag pause!'

" }}}

" Emmet Settings {{{

let g:user_emmet_leader_key=','     " trigger emmet expansion with ,,

" }}}

" CPP Highlighting Settings {{{

let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1

" }}}

" Ack Settings {{{

" TODO Read the Ack docs
if executable('rg')
  let g:ackprg = 'rg --vimgrep'
endif
let g:ackhighlight = 1
let g:ack_autoclose = 1
command! -nargs=* -bang Ag call ack#Ack('grep<bang>',<q-args>)
nnoremap ag :Ag!<Space>
nnoremap sg :Ag<Space>

" }}}

" Vim-Template Settings {{{

let g:username = 'Ben Tilley'
let g:email = 'targansaikhan@gmail.com'
let g:templates_no_autocmd = 0
let g:templates_no_builtin_templates = 1
let g:templates_directory = ['~/.vim/templates']
let g:templates_user_variables = [
      \   ['FILE_TITLE', 'Template_GetFileTitle'],
      \]

function! Template_GetFileTitle()
  let l:file_name = expand('%:t:r')
  if l:file_name =~ '-'
    let l:tokens = split(l:file_name, '-')
    let l:capitalised_tokens = []
    for t in l:tokens
      call add(l:capitalised_tokens, toupper(t[:0]).t[1:])
    endfor
    return join(l:capitalised_tokens, ' ')
  endif
  return 'Time to write some VimScript...'
endfunction

" }}}

" Search HI Settings {{{

let g:searchhi_clear_all_asap = 1

" }}}

" VimWiki Settings {{{

" define the wikis
let wiki_1 = {}
let wiki_1.path = '~/Documents/vimwiki'

let g:vimwiki_list = [wiki_1]

let g:vimwiki_global_ext = 0  " don't make temporary wikis

" }}}

" Custom Commands {{{

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

" Command for searching all open buffers for a word
if !exists(":BufSearch")
  command -nargs=1 BufSearch :cexpr [] | :bufdo vimgrepadd <args> %
endif

" }}}

" JS Pretty Template Settings {{{

" template literal highlighting
nnoremap <Leader>h :JsPreTmpl html<CR>

" }}}

" Syntax Highlighting Helpers {{{

" for showing you the syntax highlighting group of the word the you are hovering over
nnoremap <F8> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

command! ShowColours so $VIMRUNTIME/syntax/hitest.vim

" }}}
